{"version":3,"sources":["reportWebVitals.js","neutral.png","App.js","Counter.js","routes.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","history","useHistory","className","onClick","push","src","alt","neutral","Counter","useState","counter","setCounter","initialState","users","error","useReducer","state","action","type","response","initState","dispatch","getUsersActions","fetch","res","json","fetchUsers","err","getUsersSuccess","results","useEffect","prev","map","item","picture","thumbnail","name","first","cell","toString","Routes","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,eCPC,G,MAAA,IAA0B,qC,OCe1BQ,MAXf,WACE,IAAIC,EAAUC,cAEd,OACE,sBAAKC,UAAU,eAAf,UACE,qBAAKC,QAAW,kBAAMH,EAAQI,KAAK,aAAaC,IAAM,gBAAgBC,IAAM,iBAC5E,qBAAKD,IAAOE,EAASD,IAAM,oB,wBCRlB,SAASE,IAAU,IAAD,EACDC,mBAAS,GADR,mBACxBC,EADwB,KACfC,EADe,KAEzBC,EAAe,CAACC,MAAM,GAAIC,MAAM,MAFP,EAGDC,sBA4B9B,WAAwD,IAA9BC,EAA6B,uDAArBJ,EAAcK,EAAO,uCACrD,OAAOA,EAAOC,MACZ,IAAK,oBACH,OAAO,2BAAIF,GAAX,IAAkBH,MAAM,GAAD,mBAAMG,EAAMH,OAAZ,CAAkBI,EAAOE,aAClD,IAAK,oBACH,OAAO,2BAAIH,GAAX,IAAkBF,MAAOG,EAAOH,QAClC,QACE,OAAOE,KAnC6CJ,GAH3B,mBAGxBQ,EAHwB,KAGbC,EAHa,KAY/B,SAASC,EAAgBZ,IANzB,SAAoBA,GAClB,OAAOa,MAAM,kCAAD,OAAmCb,IAC5CjB,MAAK,SAAA+B,GAAG,OAAIA,EAAIC,WAKjBC,CAAWhB,GACVjB,MAAK,SAAA0B,GACDA,EAASL,MACVO,EAQC,CAACH,KAAK,oBAAqBS,IARH,sBAGzBN,EAOR,SAAyBF,GACvB,MAAO,CAACD,KAAK,oBAAqBC,YARnBS,CAAgBT,EAASU,QAAQ,QA4BlD,OAJAC,qBAAU,WACNR,EAAgBZ,KAClB,CAACA,IAGD,sBAAKR,UAAY,UAAjB,UACE,2CACA,mBAAGC,QAAW,kBAAMQ,GAAW,SAAAoB,GAAI,OAAIA,EAAK,MAA5C,SAAkDrB,IAClD,6BAEEU,EAAUP,MAAMmB,KAAI,SAAAC,GAClB,OACE,6BACE,qBAAK5B,IAAO4B,EAAKC,QAAQC,UAAW7B,IAAM2B,EAAKG,KAAKC,SAD3CJ,EAAKK,KAAKC,oBCnDlB,SAASC,IACtB,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAApB,cAAyB,cAAC,EAAD,IAAzB,OACA,eAAC,IAAD,CAAOA,KAAO,IAAd,cAAmB,cAAClC,EAAD,IAAnB,UCJNmC,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAACL,EAAD,MAEJM,SAASC,eAAe,SAM1BzD,M","file":"static/js/main.52527939.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/neutral.6e653916.png\";","import './App.css';\nimport neutral from './neutral.png';\nimport {useHistory} from 'react-router-dom';\n\nfunction App() {\n  let history = useHistory();\n\n  return (\n    <div className=\"container-sm\">\n      <img onClick = {() => history.push('/Counter')} src = \"/positive.png\" alt = \"Positive img\"/>\n      <img src = {neutral} alt = \"neutral img\"/>\n    </div>\n  );\n}\n\nexport default App;\n","import {useState, useEffect, useReducer} from 'react';\n\nexport default function Counter(){\n  const [counter, setCounter] = useState(1);\n  const initialState = {users:[], error:null}\n  const [initState, dispatch] = useReducer(getUsersReducer, initialState);\n\n  /*Entity*/\n  function fetchUsers(counter){\n    return fetch(`https://randomuser.me/api?page=${counter}`)\n      .then(res => res.json());\n  }\n\n  /*Action*/\n  function getUsersActions(counter){\n      fetchUsers(counter)\n      .then(response =>{\n        if(response.error){\n          dispatch(getUsersFailure('Get users failure'));\n        }\n        else{\n          dispatch(getUsersSuccess(response.results[0]));\n      }\n    })\n  }\n  function getUsersFailure(err){\n    return {type:'GET_USERS_FAILURE', err};\n  }\n  function getUsersSuccess(response){\n    return {type:'GET_USERS_SUCCESS', response};\n  }\n\n  /*Reducer*/\n  function getUsersReducer (state = initialState, action){\n    switch(action.type){\n      case 'GET_USERS_SUCCESS':\n        return {...state, users: [...state.users,action.response]};\n      case 'GET_USERS_FAILURE':\n        return {...state, error: action.error};\n      default:\n        return state;\n    }\n  }\n\n\n  useEffect(()=>{\n      getUsersActions(counter);\n  },[counter])\n\n  return(\n    <div className = \"counter\">\n      <h1> Counter </h1>\n      <p onClick = {() => setCounter(prev => prev+1)} >{counter}</p>\n      <ul>\n      {\n        initState.users.map(item=>{\n          return(\n            <li key = {item.cell.toString()}>\n              <img src = {item.picture.thumbnail} alt ={item.name.first}/>\n            </li>\n          )\n        })\n      }\n      </ul>\n    </div>\n  )\n}\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport App from './App';\nimport Counter from './Counter';\n\nexport default function Routes(){\n  return(\n    <BrowserRouter>\n      <Route exact path = '/'> <App/> </Route>\n      <Route path = '/'> <Counter/> </Route>\n    </BrowserRouter>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Routes from './routes';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Routes />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}